# microlibrary
#
# Copyright 2024, Andrew Countryman <apcountryman@gmail.com> and the microlibrary
# contributors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# Description: GitHub Actions CI workflow.

name: CI

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    analyze-clang-tidy:
        name: Analyze (clang-tidy)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
            - name: Analyze
              shell: bash
              run: ./ci/analyze.sh --analyzer clang-tidy

    analyze-lizard:
        name: Analyze (lizard)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive
            - name: Analyze
              shell: bash
              run: ./ci/analyze.sh --analyzer lizard

    analyze-shellcheck:
        name: Analyze (shellcheck)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
            - name: Analyze
              shell: bash
              run: ./ci/analyze.sh --analyzer shellcheck

    build-all-development_environment-test-automated:
        name: Build (all HILs, development environment target) and test (automated)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive
            - name: Build
              shell: bash
              run: ./ci/build.sh --configuration build-all-development_environment-test-automated
            - name: Test
              shell: bash
              run: ./ci/test-automated.sh --configuration build-all-development_environment-test-automated

    build-arm_cortex_m0plus-hardware:
        name: Build (Arm Cortex-M0+ HIL, hardware target)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive
            - name: Install Dependencies
              shell: bash
              run: sudo apt update && sudo apt install gcc-arm-none-eabi
            - name: Build
              shell: bash
              run: ./ci/build.sh --configuration build-arm_cortex_m0plus-hardware

    build-microchip_megaavr-hardware-atmega2560:
        name: Build (Microchip megaAVR HIL, hardware target, ATmega2560 MCU)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive
            - name: Install Dependencies
              shell: bash
              run: sudo apt update && sudo apt install gcc-avr avr-libc
            - name: Build
              shell: bash
              run: ./ci/build.sh --configuration build-microchip_megaavr-hardware-atmega2560

    build-microchip_megaavr-hardware-atmega328p:
        name: Build (Microchip megaAVR HIL, hardware target, ATmega328/P MCU)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive
            - name: Install Dependencies
              shell: bash
              run: sudo apt update && sudo apt install gcc-avr avr-libc
            - name: Build
              shell: bash
              run: ./ci/build.sh --configuration build-microchip_megaavr-hardware-atmega328p

    format:
        name: Format
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
            - name: Configure dependencies
              shell: bash
              run: sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-10 100 && sudo update-alternatives --set clang-format /usr/bin/clang-format-10
            - name: Format
              shell: bash
              run: ./ci/format.sh
